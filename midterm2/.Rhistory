}
plot(fix, rand)
relation<-lm(rand~fix)
summary(relation)
knitr::opts_chunk$set(echo = TRUE)
bike <- read.csv("BikeSharingDataset.csv")
#must convert columns to the correct data type in order to use it properly in linear modeling.
bike[,'dteday']<-as.Date(bike[,'dteday'])
#Factor > Date
bike[,'season']<-factor(bike[,'season'])
bike[,'yr']<-factor(bike[,'yr'])
bike[,'mnth']<-factor(bike[,'mnth'])
bike[,'hr']<-factor(bike[,'hr'])
bike[,'holiday']<-factor(bike[,'holiday'])
bike[,'weekday']<-factor(bike[,'weekday'])
bike[,'weekday']<-factor(bike[,'weekday'])
bike[,'workingday']<-factor(bike[,'workingday'])
bike[,'weathersit']<-factor(bike[,'weathersit'])
#Ints > Factors
#primarily need to extract data columns that we can work with
#columns -> (instant, dteday) cannot be used in linear model calculation
#column -> causal + registered = cnt
# we could potentially do two linear models, one for causal one for registered, howevever the addition of those models is the same as writing one linear model for cnt
newCol = names(bike) %in% c("instant", "dteday", "causal", "registered")
rntDAT = bike[!newCol]
g = lm(cnt ~ ., data = rntDAT)
par(mfrow = c(2, 2))
plot(g)
bike <- read.csv("BikeSharingDataset.csv")
#must convert columns to the correct data type in order to use it properly in linear modeling.
bike[,'dteday']<-as.Date(bike[,'dteday'])
#Factor > Date
bike[,'season']<-factor(bike[,'season'])
bike[,'yr']<-factor(bike[,'yr'])
bike[,'mnth']<-factor(bike[,'mnth'])
bike[,'hr']<-factor(bike[,'hr'])
bike[,'holiday']<-factor(bike[,'holiday'])
bike[,'weekday']<-factor(bike[,'weekday'])
bike[,'weekday']<-factor(bike[,'weekday'])
bike[,'workingday']<-factor(bike[,'workingday'])
bike[,'weathersit']<-factor(bike[,'weathersit'])
#Ints > Factors
#primarily need to extract data columns that we can work with
#columns -> (instant, dteday) cannot be used in linear model calculation
#column -> causal + registered = cnt
# we could potentially do two linear models, one for causal one for registered, howevever the addition of those models is the same as writing one linear model for cnt
newCol = names(bike) %in% c("instant", "dteday", "causal", "registered")
rntDAT = bike[!newCol]
g = lm(cnt ~ ., data = rntDAT)
par(mfrow = c(2, 2))
plot(g)
View(`*tmp*`)
View(`*tmp*`)
View(bike)
bike <- read.csv("BikeSharingDataset.csv")
#must convert columns to the correct data type in order to use it properly in linear modeling.
bike[,'dteday']<-as.Date(bike[,'dteday'])
#Factor > Date
bike[,'season']<-factor(bike[,'season'])
bike[,'yr']<-factor(bike[,'yr'])
bike[,'mnth']<-factor(bike[,'mnth'])
bike[,'hr']<-factor(bike[,'hr'])
bike[,'holiday']<-factor(bike[,'holiday'])
bike[,'weekday']<-factor(bike[,'weekday'])
bike[,'weekday']<-factor(bike[,'weekday'])
bike[,'workingday']<-factor(bike[,'workingday'])
bike[,'weathersit']<-factor(bike[,'weathersit'])
#Ints > Factors
#primarily need to extract data columns that we can work with
#columns -> (instant, dteday) cannot be used in linear model calculation
#column -> causal + registered = cnt
# we could potentially do two linear models, one for causal one for registered, howevever the addition of those models is the same as writing one linear model for cnt
newCol = names(bike) %in% c("instant", "dteday", "causal", "registered")
rntDAT = bike[!newCol]
library(leaps)
library(olsrr)
install.packages("olsrr")
fit <- lm(bodyfat ~ ., data = bodyfat)
fit <- lm(cnt ~ ., data = rntDAT)
summary(fit)
library(olsrr)
library(SignifReg)
install.packages("SignifReg")
library(SignifReg)
library(leaps)
full_fit <- lm(cnt ~ ., data = rntDAT)
summary(fit)
pval_backward <- SignifReg(full_fit, scope = rntDAT, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None")
knitr::opts_chunk$set(echo = TRUE)
library(SignifReg)
library(leaps)
full_fit <- lm(cnt ~ ., data = rntDAT)
summary(fit)
pval_backward <- SignifReg(full_fit, scope = rntDAT, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None")
full_fit <- lm(cnt ~ ., data = rntDAT)
pval_backward <- SignifReg(full_fit, scope = rntDAT, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None")
full_fit <- lm(cnt ~ ., data = rntDAT)
pval_forward <- SignifReg(full_fit, scope = rntDAT, alpha = 0.05, direction = "forward", criterion = "p-value", correction = "None")
full_fit <- lm(cnt ~ ., data = rntDAT)
summary(fit)
summary(SignifReg(full_fit, scope = rntDAT, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None"))
full_fit <- lm(cnt ~ ., data = rntDAT)
summary(fit)
SignifReg(full_fit, scope = rntDAT, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None")
full_fit <- lm(cnt ~ ., data = rntDAT)
SignifReg(full_fit, scope = rntDAT, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None")
full_fit <- lm(cnt ~ ., data = rntDAT)
SignifReg(full_fit, scope = rntDAT, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None")
full_fit <- lm(cnt ~ ., data = rntDAT)
SignifReg(full_fit, scope = rntDAT, alpha = 0.05, direction = "backward", criterion = "p-value")
traceback(SignifReg(full_fit, scope = rntDAT, alpha = 0.05, direction = "backward", criterion = "p-value"))
full_fit <- lm(cnt ~ ., data = rntDAT)
traceback(pval_backward <- SignifReg(full_fit, scope = rntDAT, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None"))
names(rntCol)
names(rntDAT)
bike <- read.csv("BikeSharingDataset.csv")
#must convert columns to the correct data type in order to use it properly in linear modeling.
bike[,'dteday']<-as.Date(bike[,'dteday'])
#Factor > Date
bike[,'season']<-factor(bike[,'season'])
bike[,'yr']<-factor(bike[,'yr'])
bike[,'mnth']<-factor(bike[,'mnth'])
bike[,'hr']<-factor(bike[,'hr'])
bike[,'holiday']<-factor(bike[,'holiday'])
bike[,'weekday']<-factor(bike[,'weekday'])
bike[,'weekday']<-factor(bike[,'weekday'])
bike[,'workingday']<-factor(bike[,'workingday'])
bike[,'weathersit']<-factor(bike[,'weathersit'])
#Ints > Factors
#primarily need to extract data columns that we can work with
#columns -> (instant, dteday) cannot be used in linear model calculation
#column -> causal + registered = cnt
# we could potentially do two linear models, one for causal one for registered, howevever the addition of those models is the same as writing one linear model for cnt
newCol = names(bike) %in% c("instant", "dteday", "causal", "registered")
rntDAT = bike[!newCol]
bike <- read.csv("BikeSharingDataset.csv")
#must convert columns to the correct data type in order to use it properly in linear modeling.
bike[,'dteday']<-as.Date(bike[,'dteday'])
#Factor > Date
bike[,'season']<-factor(bike[,'season'])
bike[,'yr']<-factor(bike[,'yr'])
bike[,'mnth']<-factor(bike[,'mnth'])
bike[,'hr']<-factor(bike[,'hr'])
bike[,'holiday']<-factor(bike[,'holiday'])
bike[,'weekday']<-factor(bike[,'weekday'])
bike[,'weekday']<-factor(bike[,'weekday'])
bike[,'workingday']<-factor(bike[,'workingday'])
bike[,'weathersit']<-factor(bike[,'weathersit'])
#Ints > Factors
#primarily need to extract data columns that we can work with
#columns -> (instant, dteday) cannot be used in linear model calculation
#column -> causal + registered = cnt
# we could potentially do two linear models, one for causal one for registered, howevever the addition of those models is the same as writing one linear model for cnt
newCol = names(bike) %in% c("instant", "dteday", "casual", "registered")
rntDAT = bike[!newCol]
full_fit <- lm(cnt ~ ., data = rntDAT)
pval_backward <- SignifReg(full_fit, scope = rntDAT, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None")
full_fit <- lm(cnt ~ ., data = rntDAT)
pval_backward <- SignifReg(full_fit, scope = rntDAT[,!"cnt"], alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None")
full_fit <- lm(cnt ~ ., data = rntDAT)
pval_backward <- SignifReg(full_fit, scope = bike, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None")
full_fit <- lm(cnt ~ ., data = rntDAT)
pval_backward <- SignifReg(full_fit, scope = fit, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None")
full_fit <- lm(cnt ~ ., data = rntDAT)
pval_backward <- SignifReg(full_fit, scope = rntDAT, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None")
full_fit <- lm(cnt ~ ., data = rntDAT)
pval_backward <- SignifReg(full_fit, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None")
full_fit <- lm(cnt ~ ., data = rntDAT)
pval_backward <- SignifReg(alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None")
full_fit <- lm(cnt ~ ., data = rntDAT)
pval_backward <- SignifReg(fit = full_fit, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None")
full_fit <- lm(cnt ~ ., data = rntDAT)
pval_backward <- SignifReg(fit, scope = rntDAT, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None")
full_fit <- lm(cnt ~ ., data = rntDAT)
pval_backward <- SignifReg(full_fit, scope = rntDAT, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None")
full_fit <- lm(cnt ~ ., data = rntDAT)
summary(full_fit)
full_fit <- lm(cnt ~ ., data = rntDAT[!c("workingday1")])
full_fit <- lm(cnt ~ ., data = rntDAT[!c("workingday")])
full_fit <- lm(cnt ~ ., data = rntDAT)
summary(full_fit)
bike <- read.csv("BikeSharingDataset.csv")
#must convert columns to the correct data type in order to use it properly in linear modeling.
bike[,'dteday']<-as.Date(bike[,'dteday'])
#Factor > Date
bike[,'season']<-factor(bike[,'season'])
bike[,'yr']<-factor(bike[,'yr'])
bike[,'mnth']<-factor(bike[,'mnth'])
bike[,'hr']<-factor(bike[,'hr'])
bike[,'holiday']<-factor(bike[,'holiday'])
bike[,'weekday']<-factor(bike[,'weekday'])
bike[,'weekday']<-factor(bike[,'weekday'])
bike[,'workingday']<-factor(bike[,'workingday'])
bike[,'weathersit']<-factor(bike[,'weathersit'])
#Ints > Factors
#primarily need to extract data columns that we can work with
#columns -> (instant, dteday) cannot be used in linear model calculation
#column -> causal + registered = cnt
# we could potentially do two linear models, one for causal one for registered, howevever the addition of those models is the same as writing one linear model for cnt
newCol = names(bike) %in% c("instant", "dteday", "casual", "registered","workingday)
rntDAT = bike[!newCol]
bike <- read.csv("BikeSharingDataset.csv")
#must convert columns to the correct data type in order to use it properly in linear modeling.
bike[,'dteday']<-as.Date(bike[,'dteday'])
#Factor > Date
bike[,'season']<-factor(bike[,'season'])
bike[,'yr']<-factor(bike[,'yr'])
bike[,'mnth']<-factor(bike[,'mnth'])
bike[,'hr']<-factor(bike[,'hr'])
bike[,'holiday']<-factor(bike[,'holiday'])
bike[,'weekday']<-factor(bike[,'weekday'])
bike[,'weekday']<-factor(bike[,'weekday'])
bike[,'workingday']<-factor(bike[,'workingday'])
bike[,'weathersit']<-factor(bike[,'weathersit'])
#Ints > Factors
#primarily need to extract data columns that we can work with
#columns -> (instant, dteday) cannot be used in linear model calculation
#column -> causal + registered = cnt
# we could potentially do two linear models, one for causal one for registered, howevever the addition of those models is the same as writing one linear model for cnt
newCol = names(bike) %in% c("instant", "dteday", "casual", "registered","workingday")
rntDAT = bike[!newCol]
full_fit <- lm(cnt ~ ., data = rntDAT)
summary(full_fit)
pval_backward <- SignifReg(full_fit, scope = rntDAT, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None")
pval_backward <- SignifReg(lm(cnt ~ 0, data = rntDAT), scope = rntDAT, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None")
pval_forward <- SignifReg(full_fit, scope = rntDAT, alpha = 0.05, direction = "forward", criterion = "p-value", correction = "None")
pval_backward <- SignifReg(lm(cnt ~ 0, data = rntDAT), scope = rntDAT, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None")
pval_forward <- SignifReg(lm(cnt ~ 0, data = rntDAT), scope = rntDAT, alpha = 0.05, direction = "forward", criterion = "p-value", correction = "None")
full_fit <- lm(cnt ~ 0, data = rntDAT)
summary(full_fit)
pval_backward <- SignifReg(full_fit, scope = rntDAT, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None")
pval_forward <- SignifReg(full_fit, scope = rntDAT, alpha = 0.05, direction = "forward", criterion = "p-value", correction = "None")
traceback(pval_forward <- SignifReg(full_fit, scope = rntDAT, alpha = 0.05, direction = "forward", criterion = "p-value", correction = "None"))
pval_backward <- SignifReg(full_fit, scope = rntDAT, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None")
regfit <- regsubsets(cnt ~ ., data = rntDAT, nvmax = 13, method = "forward")
regfit_summary <- summary(regfit)
adjr2_forward <- regfit_summary$which[which.max(regfit_summary$adjr2),]
aic <- rep(0, 13)
for(i in 1:13){
newmod <- lm(cnt ~ ., data = rntDAT[,regfit_summary$which[i,]])
aic[i] <- AIC(newmod)
}
bike <- read.csv("BikeSharingDataset.csv")
#must convert columns to the correct data type in order to use it properly in linear modeling.
bike[,'dteday']<-as.Date(bike[,'dteday'])
#Factor > Date
bike[,'season']<-factor(bike[,'season'])
bike[,'yr']<-factor(bike[,'yr'])
bike[,'mnth']<-factor(bike[,'mnth'])
bike[,'hr']<-factor(bike[,'hr'])
bike[,'holiday']<-factor(bike[,'holiday'])
bike[,'weekday']<-factor(bike[,'weekday'])
bike[,'weekday']<-factor(bike[,'weekday'])
bike[,'workingday']<-factor(bike[,'workingday'])
bike[,'weathersit']<-factor(bike[,'weathersit'])
#Ints > Factors
#primarily need to extract data columns that we can work with
#columns -> (instant, dteday) cannot be used in linear model calculation
#column -> causal + registered = cnt
# we could potentially do two linear models, one for causal one for registered, howevever the addition of those models is the same as writing one linear model for cnt
newCol = names(bike) %in% c("instant", "dteday", "casual", "registered")
rntDAT = bike[!newCol]
pval_backward <- SignifReg(full_fit, scope = rntDAT, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None")
regfit <- regsubsets(cnt ~ ., data = rntDAT, nvmax = 13, method = "forward")
regfit_summary <- summary(regfit)
adjr2_forward <- regfit_summary$which[which.max(regfit_summary$adjr2),]
aic <- rep(0, 13)
for(i in 1:1){
newmod <- lm(cnt ~ ., data = rntDAT[,regfit_summary$which[i,]])
aic[i] <- AIC(newmod)
}
pval_backward <- SignifReg(full_fit, scope = rntDAT, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None")
regfit <- regsubsets(cnt ~ ., data = rntDAT, nvmax = 13, method = "forward")
regfit_summary <- summary(regfit)
adjr2_forward <- regfit_summary$which[which.max(regfit_summary$adjr2),]
aic <- rep(0, 13)
for(i in 1:13){
newmod <- lm(cnt ~ ., data = rntDAT[,regfit_summary$which[i,]])
aic[i] <- AIC(newmod)
}
knitr::opts_chunk$set(echo = TRUE)
library(SignifReg)
library(leaps)
bike <- read.csv("BikeSharingDataset.csv")
#must convert columns to the correct data type in order to use it properly in linear modeling.
bike[,'dteday']<-as.Date(bike[,'dteday'])
#Factor > Date
newCol = names(bike) %in% c("instant", "dteday", "casual", "registered")
rntDAT = bike[!newCol]
full_fit <- lm(cnt ~ 0, data = rntDAT)
summary(full_fit)
pval_backward <- SignifReg(full_fit, scope = rntDAT, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None")
regfit <- regsubsets(cnt ~ ., data = rntDAT, nvmax = 13, method = "forward")
regfit_summary <- summary(regfit)
adjr2_forward <- regfit_summary$which[which.max(regfit_summary$adjr2),]
aic <- rep(0, 13)
for(i in 1:13){
newmod <- lm(cnt ~ ., data = rntDAT[,regfit_summary$which[i,]])
aic[i] <- AIC(newmod)
}
pval_backward <- SignifReg(full_fit, scope = rntDAT, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None")
regfit <- regsubsets(cnt ~ ., data = rntDAT, nvmax = 13, method = "forward")
regfit_summary <- summary(regfit)
adjr2_forward <- regfit_summary$which[which.max(regfit_summary$adjr2),]
aic <- rep(0, 12)
for(i in 1:12){
newmod <- lm(cnt ~ ., data = rntDAT[,regfit_summary$which[i,]])
aic[i] <- AIC(newmod)
}
regfit_summary$which[i,]
regfit_summary$which[1,]
regfit_summary$which[2,]
regfit_summary$which[3,]
regfit_summary$which[4,]
regfit_summary$which[5,]
pval_backward <- SignifReg(full_fit, scope = rntDAT, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None")
regfit <- regsubsets(cnt ~ ., data = rntDAT, nvmax = 13, method = "forward")
regfit_summary <- summary(regfit)
adjr2_forward <- regfit_summary$which[which.max(regfit_summary$adjr2),]
aic <- rep(0, 12)
for(i in 1:12){
newmod <- lm(cnt ~ ., data = rntDAT[,regfit_summary$which[0,]])
aic[i] <- AIC(newmod)
}
pval_backward <- SignifReg(full_fit, scope = rntDAT, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None")
regfit <- regsubsets(cnt ~ ., data = rntDAT, nvmax = 13, method = "forward")
regfit_summary <- summary(regfit)
adjr2_forward <- regfit_summary$which[which.max(regfit_summary$adjr2),]
aic <- rep(0, 12)
for(i in 1:12){
newmod <- lm(cnt ~ ., data = rntDAT[,regfit_summary$which[1,]])
aic[i] <- AIC(newmod)
}
full_fit <- lm(cnt ~ ., data = rntDAT)
summary(full_fit)
pval_backward <- SignifReg(full_fit, scope = rntDAT, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None")
regfit <- regsubsets(cnt ~ ., data = rntDAT, nvmax = 13, method = "forward")
regfit_summary <- summary(regfit)
adjr2_forward <- regfit_summary$which[which.max(regfit_summary$adjr2),]
aic <- rep(0, 12)
for(i in 1:12){
newmod <- lm(cnt ~ ., data = rntDAT[,regfit_summary$which[1,]])
aic[i] <- AIC(newmod)
}
pval_backward <- SignifReg(full_fit, scope = rntDAT, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None")
pval_forward <- SignifReg(full_fit, scope = bodyfat, alpha = 0.05, direction = "forward", criterion = "p-value", correction = "None")
pval_backward <- SignifReg(full_fit, scope = rntDAT, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None")
pval_forward <- SignifReg(full_fit, scope = rntDAT, alpha = 0.05, direction = "forward", criterion = "p-value", correction = "None")
regfit <- regsubsets(cnt ~ ., data = rntDAT, nvmax = 13, method = "forward")
regfit_summary <- summary(regfit)
adjr2_forward <- regfit_summary$which[which.max(regfit_summary$adjr2),]
aic <- rep(0, 12)
for(i in 1:12){
newmod <- lm(cnt ~ ., data = rntDAT[,regfit_summary$which[1,]])
aic[i] <- AIC(newmod)
}
pval_backward <- SignifReg(full_fit, scope = rntDAT, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None")
pval_forward <- SignifReg(full_fit, scope = rntDAT, alpha = 0.05, direction = "forward", criterion = "p-value", correction = "None")
regfit <- regsubsets(cnt ~ ., data = rntDAT, nvmax = 12, method = "forward")
regfit_summary <- summary(regfit)
adjr2_forward <- regfit_summary$which[which.max(regfit_summary$adjr2),]
aic <- rep(0, 12)
for(i in 1:12){
newmod <- lm(cnt ~ ., data = rntDAT[,regfit_summary$which[1,]])
aic[i] <- AIC(newmod)
}
pval_backward <- SignifReg(full_fit, scope = rntDAT, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None")
pval_forward <- SignifReg(full_fit, scope = rntDAT, alpha = 0.05, direction = "forward", criterion = "p-value", correction = "None")
regfit <- regsubsets(cnt ~ ., data = rntDAT, nvmax = 12, method = "forward")
regfit_summary <- summary(regfit)
adjr2_forward <- regfit_summary$which[which.max(regfit_summary$adjr2),]
aic <- rep(0, 12)
for(i in 1:12){
newmod <- lm(cnt ~ ., data = rntDAT[,regfit_summary$which[1,]])
aic[i] <- AIC(newmod)
}
regfit_summary
bike <- read.csv("BikeSharingDataset.csv")
#must convert columns to the correct data type in order to use it properly in linear modeling.
bike[,'dteday']<-as.Date(bike[,'dteday'])
#Factor > Date
bike[,'season']<-factor(bike[,'season'])
bike[,'yr']<-factor(bike[,'yr'])
bike[,'mnth']<-factor(bike[,'mnth'])
bike[,'hr']<-factor(bike[,'hr'])
bike[,'holiday']<-factor(bike[,'holiday'])
bike[,'weekday']<-factor(bike[,'weekday'])
bike[,'weekday']<-factor(bike[,'weekday'])
bike[,'workingday']<-factor(bike[,'workingday'])
bike[,'weathersit']<-factor(bike[,'weathersit'])
#Ints > Factors
#primarily need to extract data columns that we can work with
#columns -> (instant, dteday) cannot be used in linear model calculation
#column -> causal + registered = cnt
# we could potentially do two linear models, one for causal one for registered, howevever the addition of those models is the same as writing one linear model for cnt
newCol = names(bike) %in% c("instant", "dteday", "casual", "registered")
rntDAT = bike[!newCol]
plot(bike$dteday,bike$cnt)
plot(bike$hr,bike$cnt)
plot(bike$mnth,bike$cnt)
plot(bike$holiday,bike$cnt)
plot(bike$weekday,bike$cnt)
plot(bike$workingday,bike$cnt)
plot(bike$instant,bike$cnt)
plot(bike$season,bike$cnt)
plot(bike$yr,bike$cnt)
plot(bike$season,bike$cnt)
plot(bike$mnth,bike$cnt)
plot(bike$weekday,bike$cnt)
plot(bike$hr,bike$cnt)
plot(bike$holiday, bik$cnt)
plot(bike$yr,bike$cnt)
plot(bike$season,bike$cnt)
plot(bike$mnth,bike$cnt)
plot(bike$weekday,bike$cnt)
plot(bike$hr,bike$cnt)
plot(bike$holiday, bikw$cnt)
plot(bike$yr,bike$cnt)
plot(bike$season,bike$cnt)
plot(bike$mnth,bike$cnt)
plot(bike$weekday,bike$cnt)
plot(bike$hr,bike$cnt)
plot(bike$holiday, bike$cnt)
plot(bike$yr,bike$cnt)
plot(bike$season,bike$cnt)
plot(bike$mnth,bike$cnt)
plot(bike$weekday,bike$cnt)
plot(bike$hr,bike$cnt)
plot(bike$holiday, bike$cnt)
plot(bike$workingday, bike$cnt)
for(level in bike){}
for(level in bike){
name(level)
}
for(level in bike){
print(level)
}
for(level in bike){
names(level)
}
for(i in names(bike)){
plot(i, bike$cnt)
}
for(i in names(bike)){
print(i)
}
for(i in names(bike)){
+     plot(i,bike$cnt)
+ }
for(i in names(bike)){
plot(i,bike$cnt)
}
for(i in names(bike)){
plot(bike[,i],bike$cnt)
}
for(i in names(bike)){
plot(bike[,i],bike$cnt, ylab = i )
}
bike <- read.csv("BikeSharingDataset.csv")
#must convert columns to the correct data type in order to use it properly in linear modeling.
bike[,'dteday']<-as.Date(bike[,'dteday'])
#Factor > Date
bike[,'mnth']<-factor(bike[,'mnth'])
bike[,'hr']<-factor(bike[,'hr'])
bike[,'holiday']<-factor(bike[,'holiday'])
bike[,'weekday']<-factor(bike[,'weekday'])
bike[,'weekday']<-factor(bike[,'weekday'])
bike[,'workingday']<-factor(bike[,'workingday'])
bike[,'weathersit']<-factor(bike[,'weathersit'])
#Ints > Factors
#primarily need to extract data columns that we can work with
#columns -> (instant, dteday) cannot be used in linear model calculation
#column -> causal + registered = cnt
# we could potentially do two linear models, one for causal one for registered, howevever the addition of those models is the same as writing one linear model for cnt
newCol = names(bike) %in% c("instant", "dteday", "casual", "registered")
rntDAT = bike[!newCol]
for(i in names(bike)){
plot(bike[,i],bike$cnt, ylab = i )
}
bike <- read.csv("BikeSharingDataset.csv")
#must convert columns to the correct data type in order to use it properly in linear modeling.
bike[,'dteday']<-as.Date(bike[,'dteday'])
#Factor > Date
bike[,'yr']<-factor(bike[,'yr'])
bike[,'mnth']<-factor(bike[,'mnth'])
bike[,'hr']<-factor(bike[,'hr'])
bike[,'holiday']<-factor(bike[,'holiday'])
bike[,'weekday']<-factor(bike[,'weekday'])
bike[,'season']<-factor(bike[,'season'])
bike[,'workingday']<-factor(bike[,'workingday'])
bike[,'weathersit']<-factor(bike[,'weathersit'])
#Ints > Factors
#primarily need to extract data columns that we can work with
#columns -> (instant, dteday) cannot be used in linear model calculation
#column -> causal + registered = cnt
# we could potentially do two linear models, one for causal one for registered, howevever the addition of those models is the same as writing one linear model for cnt
newCol = names(bike) %in% c("instant", "dteday", "casual", "registered")
rntDAT = bike[!newCol]
for(i in names(bike)){
plot(bike[,i],bike$cnt, ylab = i)
}
for(i in names(bike)){
plot(bike[,i],bike$cnt^(1/3), ylab = i)
}
for(i in names(bike)){
plot(bike[,i],bike$cnt, ylab = i)
}
library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
